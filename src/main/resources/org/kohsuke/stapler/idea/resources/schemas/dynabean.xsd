<?xml version="1.0" encoding="UTF-8"?><xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="jelly:dynabean" elementFormDefault="qualified">

  <xsd:annotation>
    <xsd:documentation>

      <p>
        A tag library for creating new DynaClass and DynaBean objects from the


        <a>beanutils</a>
        library

      </p>

    </xsd:documentation>
  </xsd:annotation>

  <xsd:element name="set">
    <xsd:annotation>
      <xsd:documentation>A tag which sets a variable from the result of an expression</xsd:documentation>
    </xsd:annotation>
    <xsd:complexType mixed="true">
      <xsd:sequence>
        <xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:attribute name="var">
        <xsd:annotation>
          <xsd:documentation>Sets the variable name to define for this expression</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="scope">
        <xsd:annotation>
          <xsd:documentation>Sets the variable scope for this variable. For example setting this value to 'parent' will
            set this value in the parent scope. When Jelly is run from inside a Servlet environment
            then other scopes will be available such as 'request', 'session' or 'application'.

            Other applications may implement their own custom scopes.</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="value">
        <xsd:annotation>
          <xsd:documentation>Sets the expression to evaluate.</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="target">
        <xsd:annotation>
          <xsd:documentation>Sets the target object on which to set a property.</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="property">
        <xsd:annotation>
          <xsd:documentation>Sets the name of the property to set on the target object.</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="trim">
        <xsd:annotation>
          <xsd:documentation/>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="escapeText">
        <xsd:annotation>
          <xsd:documentation/>
        </xsd:annotation>
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="property">
    <xsd:annotation>
      <xsd:documentation>DynaProperty tag defines a property of a DynaClass
        It can only exist inside a DynaClass parent context
        The properties are added to the properties array
        of the parent context, and will be used to
        create the DynaClass object</xsd:documentation>
    </xsd:annotation>
    <xsd:complexType mixed="true">
      <xsd:sequence>
        <xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:attribute name="name">
        <xsd:annotation>
          <xsd:documentation>Sets the name of this property</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="type">
        <xsd:annotation>
          <xsd:documentation>Sets the type name of this property</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="propertyClass">
        <xsd:annotation>
          <xsd:documentation>Sets the Class instance for this property</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="trim">
        <xsd:annotation>
          <xsd:documentation/>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="escapeText">
        <xsd:annotation>
          <xsd:documentation/>
        </xsd:annotation>
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="dynaclass">
    <xsd:annotation>
      <xsd:documentation>A tag which creates and defines and creates a DynaClass
        The DynaClass object is placed by name in the context,
        so that a DynaBean tag can use it by name to instantiate
        a DynaBean object</xsd:documentation>
    </xsd:annotation>
    <xsd:complexType mixed="true">
      <xsd:sequence>
        <xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:attribute name="name">
        <xsd:annotation>
          <xsd:documentation>Sets the name of the new DynaClass</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="var">
        <xsd:annotation>
          <xsd:documentation>Sets the name of the variable to export the DynaClass instance</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="trim">
        <xsd:annotation>
          <xsd:documentation/>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="escapeText">
        <xsd:annotation>
          <xsd:documentation/>
        </xsd:annotation>
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="dynabean">
    <xsd:annotation>
      <xsd:documentation>A tag which conditionally evaluates its body based on some condition</xsd:documentation>
    </xsd:annotation>
    <xsd:complexType mixed="true">
      <xsd:sequence>
        <xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:sequence>
      <xsd:attribute name="dynaclass">
        <xsd:annotation>
          <xsd:documentation>Sets the DynaClass of the new instance to create</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="var">
        <xsd:annotation>
          <xsd:documentation>Sets the name of the variable to export the new DynaBean instance to</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="trim">
        <xsd:annotation>
          <xsd:documentation/>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="escapeText">
        <xsd:annotation>
          <xsd:documentation/>
        </xsd:annotation>
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

</xsd:schema>
